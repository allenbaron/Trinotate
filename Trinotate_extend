#!/usr/bin/env perl

use strict;
use warnings;

use FindBin;
use lib ("$FindBin::RealBin/PerlLib");
use Pipeliner;
use DBI;
use Sqlite_connect;
use DelimParser;

use Getopt::Long qw(:config no_ignore_case bundling pass_through);

my $EXTENSION_DIR = "$FindBin::RealBin/extension";

my $usage = <<__EOUSAGE__;

##################################################################
#
#  --sqlite <string>          name of sqlite database
#
#   AT LEAST ONE OF: 
#       --create              whether to create 'taxonomyComplete' and 'GOrelate' tables
#       --tax_dmp <string>    path to NCBI new_taxdump.zip file
#       --go <string>         path to gene ontology file (obo format, optionally .gz)
#       --uniref <string>     path to UniRef[100|90|50].xml file (optionally .gz)
#
#   Other Options
#       --prefix <string>     prefix for intermediate parsed files
#       --cleanup             whether to remove intermediate files (default = False)
#       --help|h              this menu
#
##################################################################

__EOUSAGE__

    ;

my $help_flag;
my $create_flag;
my $sqlite_db;
my $tax_dmp;
my $go;
my $uniref;
my $prefix = "";
my $cleanup_flag;

&GetOptions(
    'help|h' => \$help_flag,
    'create' => \$create_flag,
    'sqlite=s' => \$sqlite_db,
    'tax_dmp=s' => \$tax_dmp,
    'go=s' => \$go,
    'uniref=s' => \$uniref,
    'prefix=s' => \$prefix,
    'cleanup' => \$cleanup_flag,
    );

if ($help_flag) {
    die $usage;
}

unless ($sqlite_db) {
    die $usage;
}

unless ($tax_dmp || $go || $uniref || $create_flag) {
    die $usage . "\n\n Select an action to perform.\n";
}

# taxonomy new_taxdump_2020-04-01.zip, ftp://ftp.ncbi.nlm.nih.gov/pub/taxonomy/taxdump_archive/new_taxdump_2020-04-01.zip
# go gene_ontology_edit.obo.2020-04-01, ftp://ftp.geneontology.org/go/ontology-archive/gene_ontology_edit.obo.2020-04-01.gz
# uniref90 2020_02, ftp://ftp.uniprot.org/pub/databases/uniprot/previous_releases/release-2020_02/uniref/uniref2020_02.tar.gz

main: {

    my $checkpoint_dir = "__trino_chkpts";
    
    unless (-s $sqlite_db) {
        die "Error, cannot find sqlite database: $sqlite_db ";
    }
    
    my $pipeliner = new Pipeliner(-verbose => 2);

    unless (-d $checkpoint_dir) {
        mkdir $checkpoint_dir or die "Error, cannot mkdir $checkpoint_dir";
    }


    # Create tables, if don't exist

    if ($create_flag) {
        
        my $dbh = DBI->connect( "dbi:SQLite:$sqlite_db" ) || die "Cannot connect: $DBI::errstr";
        
        ## NCBI taxonomy table
        &RunMod($dbh, "create table taxonomyComplete(tax_id, name, unique_name, parent_tax_id, rank);");
        &RunMod($dbh, "CREATE UNIQUE INDEX taxonomyComplete ON taxonomyComplete(tax_id)");

        ## GO relationship table
        &RunMod($dbh, "create table GOrelate(id, name, alt_id, children, comment,"
                    .   "definition, parent_ids, namespace, relationship, subset, synonym, xref);");
        &RunMod($dbh, "CREATE UNIQUE INDEX GOrelate ON GOrelate(id)");
        
        $dbh->disconnect();
        
    }

    
    my $tax_output = $prefix . "taxonomyComplete.tsv";
    my $go_output = $prefix . "GOrelate.tsv";
    my $uniref_output = $prefix . "uniref_UPI.tsv";
    
    
    ## process NCBI new_taxdmp file
    if($tax_dmp) {
        
        $pipeliner->add_commands(new Command("unzip \"$tax_dmp\" fullnamelineage.dmp nodes.dmp -d \"$checkpoint_dir\"",
                                             "$checkpoint_dir/unzip_tax_dmp.ok"));
        
        $pipeliner->add_commands(new Command("Rscript $EXTENSION_DIR/NCBI_taxonomy_parser.R \"$checkpoint_dir/fullnamelineage.dmp\" \"$checkpoint_dir/nodes.dmp\" \"$tax_output\"",
                                             "$checkpoint_dir/parse_ncbi_tax.ok"));
    }
    
    ## process gene ontology file
    if($go) {
        
        $pipeliner->add_commands(new Command("python $EXTENSION_DIR/obo_parser.py \"$go\" > \"$go_output\"",
                                             "$checkpoint_dir/parse_go.ok"));
    }
    
    ## process UniRef90 XML file
    if($uniref) {
        $pipeliner->add_commands(new Command("perl $EXTENSION_DIR/UniRef_data_parser.pl \"$uniref\" \"$uniref_output\"",
                                             "$checkpoint_dir/parse_uniref.ok") );
    }

    $pipeliner->run();

    
    ## Purge earlier stored results for data to load
    
    my $dbh = DBI->connect( "dbi:SQLite:$sqlite_db" ) || die "Cannot connect: $DBI::errstr";
    
    if($tax_dmp) {
        print "* Removing previously loaded taxonomyComplete data\n";
        $dbh->do("DELETE FROM taxonomyComplete") or die $!;
    }
    
    if($go) {
        print "* Removing previously loaded GOrelate data\n";
        $dbh->do("DELETE FROM GOrelate") or die $!;
    }
    
    if($uniref) {
        print "* Removing previously loaded UniRef data from UniprotIndex\n";
        $dbh->do("DELETE FROM UniprotIndex WHERE Accession LIKE 'UniRef%'") or die $!;
    }
    
    $dbh->disconnect();
    
    
    # load in the data
    print "\n";
    if ($tax_dmp) {
        
        unless (-s $tax_output) {
            die "Error, cannot locate file $tax_output";
            
        }
        
        &Sqlite_connect::bulk_load_sqlite($sqlite_db, "taxonomyComplete", $tax_output);
        print "\n";
    }
    
    if ($go) {

        unless (-s $go_output) {
            die "Error, cannot locate file $go_output";
        }

        &Sqlite_connect::bulk_load_sqlite($sqlite_db, "GOrelate", $go_output);
        print "\n";
    }
    
    if ($uniref) {
        # parse uniprot dat file

        unless (-s $uniref_output) {
            die "Error, cannot locate file $uniref_output";
        }
        
        &Sqlite_connect::bulk_load_sqlite($sqlite_db, "UniprotIndex", $uniref_output);
        print "\n";
    }


    # cleanup (intermediate output only if specified)
    print "* Cleaning up\n";

    if ($cleanup_flag) {
        my @tmpfiles = ($tax_output, $go_output, $uniref_output);

        foreach my $file (@tmpfiles) {
            unlink($file);
        }
    }
    
    `rm -rf $checkpoint_dir`;
    
    exit(0);
}
